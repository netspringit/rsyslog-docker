###
# vkucukcakar/rsyslog
# rsyslog and logrotate Docker image with automatic configuration file creation and export
# Copyright (c) 2017 Volkan Kucukcakar
# 
# This file is part of vkucukcakar/rsyslog.
# 
# vkucukcakar/rsyslog is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 2 of the License, or
# (at your option) any later version.
# 
# vkucukcakar/rsyslog is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# 
# This copyright notice and license must be retained in all files and derivative works.
###

###
# Container     : ${CONTAINER_NAME}
# Symbolic link : /etc/rsyslog.conf
# Description   : rsyslog main configuration file. Edit to configure rsyslog settings.
# Note          : This file is automatically created by vkucukcakar/rsyslog image
###


#  /etc/rsyslog.conf	Configuration file for rsyslog.
#
#			For more information see
#			/usr/share/doc/rsyslog-doc/html/rsyslog_conf.html


#################
#### MODULES ####
#################

#$ModLoad imuxsock # provides support for local system logging
#$ModLoad imklog   # provides kernel logging support
#$ModLoad immark  # provides --MARK-- message capability

# provides UDP syslog reception
$ModLoad imudp
$UDPServerRun 5514

# provides TCP syslog reception
$ModLoad imtcp
$InputTCPServerRun 5514


###########################
#### GLOBAL DIRECTIVES ####
###########################

#
# Use traditional timestamp format.
# To enable high precision timestamps, comment out the following line.
#
$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat

#
# Set the default permissions for all log files.
#
$FileOwner root
$FileGroup adm
$FileCreateMode 0640
$DirCreateMode 0755
$Umask 0022

#
# Where to place spool and state files
#
$WorkDirectory /var/spool/rsyslog

#
# Include all config files in /etc/rsyslog.d/
#
$IncludeConfig /etc/rsyslog.d/*.conf


###############
#### RULES ####
###############


# Notes: 
# 1) /etc/rsyslog.d/*.conf already included above and gets executed first.
# 2) Order of blocks is important because of the "& stop" statement.

# Some examples:



# Catch logs by container name and by matching regex then save to a separate place
#if $programname=="server-proxy" and re_match($msg, '[^"]+"example\\.com"') then action(type="omfile" file="/var/log/example-com-web.log" ASyncWriting="on" flushOnTXEnd="off" flushInterval="1" ioBufferSize="64k")
#& stop


# Catch logs by container name and save to a separate place
#if $programname=="example-com-web" then action(type="omfile" file="/var/log/example-com-web.log" ASyncWriting="on" flushOnTXEnd="off" flushInterval="1" ioBufferSize="64k")
#& stop


# Catch reverse proxy server logs (by matching container server-proxy)
#if $programname=="server-proxy" then action(type="omfile" file="/var/log/server-proxy.log" ASyncWriting="on" flushOnTXEnd="off" flushInterval="1" ioBufferSize="64k")
#& stop


# Catch logs by matching container name and purge
#if re_match($programname, '-web$') then stop


# Catch php access logs (by matching container ending with "-php" and message ending e.g: " 200") and purge
#if re_match($programname, '-php$') and re_match($msg, '[[:space:]][0-9]{3}$') then stop


# Catch php script errors and save into a separate file
#if re_match($programname, '-php$') and re_match($msg, '[^"]+said into stderr: "') then action(type="omfile" file="/var/log/php-error.log" ASyncWriting="on" flushOnTXEnd="off" flushInterval="1" ioBufferSize="64k")
#& stop


# Purge other php errors
#if re_match($programname, '-php$') then stop



# Catch-all logs rule should stand at the end of file
action(type="omfile" file="/var/log/${COMMON_TAG}.log" ASyncWriting="on" flushOnTXEnd="off" flushInterval="1" ioBufferSize="64k")
stop

#
